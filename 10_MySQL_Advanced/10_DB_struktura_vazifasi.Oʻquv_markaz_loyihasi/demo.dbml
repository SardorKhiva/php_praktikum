Table ustozlar {    
    id              int [PK]
    ismi            text
    bio             text
    telefon         varchar(13)
    email           varchar
    yashash_manzili text 
}

Table `kurslar` {
    `id` int  [primary key, auto increment]
    `nomi` text
    `davomiyligi` int
    `narhi` DECIMAL
    `ustoz_id` int

}

Table `xonalar`{
    `id` int [primary key, auto increment]
    `nomi` varchar
    `sig'imi` int
}

Table `guruhlar`{
    `id` int [primary key, auto increment]
    `kurs_id` int 
    `ustoz_id` int 
    `xona_id` int
    `boshlagan_sana` date [not null]
    `max_talabalar` tinyint unsigned [not null]
}
Ref: `guruhlar`.`kurs_id` > `kurslar`.`id`  

/*
    
CREATE TABLE IF NOT EXISTS `guruhlar`
(
    `id`              INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `kurs_id`         INT UNSIGNED COMMENT "bu guruh qaysi kursni o'qiyapti",
    `ustoz_id`        INT UNSIGNED COMMENT "guruhga biriktirilgan ustoz",
    `xona_id`         INT UNSIGNED COMMENT "guruh xonasi",
    `boshlangan_sana` DATE NOT NULL COMMENT "guruh o'qishni boshlagan vaqti",
    `max_talabalar`   TINYINT UNSIGNED COMMENT "maksimal talabalar soni 0 dan 255 gacha",
    FOREIGN KEY (`kurs_id`) REFERENCES `kurslar` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (`ustoz_id`) REFERENCES `ustozlar` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (`xona_id`) REFERENCES `xonalar` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS `ota_onalar`
(
    `id`       INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `ismi`     VARCHAR(255) NOT NULL UNIQUE COMMENT "ota-onalardan birining to'liq ism sharifi familyasi",
    `telefoni` VARCHAR(13)  NOT NULL
);
CREATE TABLE IF NOT EXISTS `talabalar`
(
    `id`         INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `ismi`       VARCHAR(255) NOT NULL COMMENT "talabaning to'liq ismi, sharifi va familyasi",
    `bio`        TEXT COMMENT "talaba haqida qisqa ma'lumot",
    `telefoni`   VARCHAR(13)  NOT NULL,
    `ota_ona_id` INT UNSIGNED NOT NULL COMMENT "kimning farzandi",
    `kurs_id`    INT UNSIGNED COMMENT "qaysi kursga borishi",
    FOREIGN KEY (`ota_ona_id`) REFERENCES `ota_onalar` (`id`),
    FOREIGN KEY (`kurs_id`) REFERENCES `kurslar` (`id`)
);
CREATE TABLE IF NOT EXISTS `guruh_talabalari`
(
    `id`        INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `kurs_id`   INT UNSIGNED COMMENT "bu guruhdagi talaba qaysi kursga boradi",
    `talaba_id` INT UNSIGNED COMMENT "qaysi talaba",
    `boshladi`  DATE COMMENT "guruhga qo'shilgan sanasi",
    FOREIGN KEY (`kurs_id`) REFERENCES `kurslar` (`id`),
    FOREIGN KEY (`talaba_id`) REFERENCES `talabalar` (`id`)
);
CREATE TABLE IF NOT EXISTS `to'lovlar`
(
    `id`             INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    `talaba_id`      INT UNSIGNED,
    `guruh_id`       INT UNSIGNED,
    `to'lov_miqdori` DECIMAL(10, 2) COMMENT "to'lov summasi",
    `to'lov_sanasi`  DATE NOT NULL,
    `oy_uchun`       DATE NOT NULL COMMENT "qaysi oy uchun to'lov qilganligi",
    FOREIGN KEY (`talaba_id`) REFERENCES `talabalar` (`id`),
    FOREIGN KEY (`guruh_id`) REFERENCES `guruhlar` (`id`)
);
*/

/*
Синтаксис DBML (Database Markup Language)

DBML — это простой и читаемый язык разметки для описания структуры баз данных. Он позволяет задавать таблицы, их поля, связи, индексы и другие параметры.


1. Определение таблицы

Table имя_таблицы {
  имя_поля тип_данных [атрибуты]
}


Пример:

Table users {
  id int [primary key, auto increment]
  name varchar(100)
  email varchar(150) [unique, not null]
  created_at timestamp [default: now()]
}

Объяснение:
- `primary key` — первичный ключ.
- `auto increment` — автоинкремент.
- `unique` — уникальное значение.
- `not null` — запрещает `NULL`.
- `default: now()` — значение по умолчанию.


2. Связи между таблицами (Foreign Keys)

Ref: таблица_1.поле_1 > таблица_2.поле_2

Пример:

Table posts {
  id int [primary key, auto increment]
  user_id int [not null]
  title varchar(255)
  content text
  created_at timestamp [default: now()]
}

Ref: posts.user_id > users.id

Объяснение:
- `posts.user_id` связан с `users.id` (внешний ключ).


3. Определение индексов

Indexes {
  (поле_1, поле_2) [unique]
}

Пример:

Table products {
  id int [primary key, auto increment]
  name varchar(255)
  price decimal(10,2)
  category_id int
}

Indexes {
  (name)
  (category_id, price) [unique]
}

Объяснение:
- Создан индекс по `name`.
- Уникальный составной индекс `(category_id, price)`.



4. Внешний ключ с ON DELETE / ON UPDATE

Ref: таблица_1.поле > таблица_2.поле [delete: cascade, update: restrict]

Пример:

Ref: orders.customer_id > customers.id [delete: cascade, update: restrict]

Объяснение:
- `delete: cascade` — при удалении клиента удаляются его заказы.
- `update: restrict` — нельзя изменить `id` клиента, если есть заказы.



5. Определение схемы (Schema)

Table schema_name.table_name { ... }

Пример:

Table sales.orders {
  id int [primary key, auto increment]
  customer_id int
  total decimal(10,2)
}

Объяснение:
- Таблица `orders` находится в схеме `sales`.


6. Комментарии

// Однострочный комментарий



Итог
DBML — это удобный язык для описания структуры базы данных. Он позволяет:
✔ Создавать таблицы.  
✔ Определять типы данных и ограничения.  
✔ Устанавливать связи и индексы.  
✔ Работать со схемами и комментариями.  
*/